// Bot Functions

// char matchingCharacters(int index)
// Requires: Nothing
// Effects: Returns a char representing the first letter of the ship that has the specified size.

// int botMove(char **opponentGrid, int **heatmap, int smokeScreensUsedBot, int radarSweepsBot, char **displayedGridBot, int *ship)
// Requires: Nothing
// Effects: Calls the best function or move that the bot should perform based on the current conditions.

// void fireBot(char **opponentGrid, int **heatmap, char **displayedGridBot, int *ship)
// Requires: Nothing
// Effects: Fires at a suitable cell in the opponent's grid using the heatmap, or fires randomly, potentially prioritizing edges.

// int boundedByMisses(char **displayedGridBot, int col, int row)
// Requires: Nothing
// Effects: Returns -1 if all adjacent cells to the one with coordinates (row, col) are misses; otherwise, returns 1.

// void initializeHeatGrid(int **heatGrid)
// Requires: Nothing
// Effects: Initializes the given heatmap to zero.

// void updateHeatMap(int col, int row, char result, char *move, int **heatGrid)
// Requires: Nothing
// Effects: Updates the given heatmap. If the result is a hit, increases the values of cells adjacent to (row, col). If it's a miss, decreases their values.

// char updateDisplayedGridBot(char **opponentGrid, char **displayedGridBot, int nexti, int nextj, int *ship, int **heatmap)
// Requires: Nothing
// Effects: Updates the bot's displayed grid after firing at cell (nexti, nextj), returns the result (HIT/MISS), updates the heatmap, and decrements the size of the corresponding ship in the `ship` array if the result is a hit.

// Common Functions

// int matchingIndices(char element)
// Requires: Nothing
// Effects: Returns the size of the ship that starts with the letter represented by `element`.

// void printGrid(char **grid)
// Requires: Nothing
// Effects: Prints the grid passed as a parameter.

// Player Functions

//void to_lowercase(char *str)
//Requires:a string of alphabetical characters
//Effects:changes all the charcters to lower case 

//void fillGrid(char **grid, char name[])
//Requires: Nothing
//Effects: prompts the player to input the position of each ship.If the position is valid ,it places the ship using the locateShip function.Otherwise it informs the user of the issue and prompts for a new input

//void locateship(int size, char letter, int col, int row, char **grid, char direction[])
//Requires:direction passed should either be "horizontal" or "vertical" where case isn't important
//Effects: places the ship on the grid in the specified location

//void clearConsole()
//Requires: nothing
//Effects: clears the console

// int canPlaceShip(char **grid, char direction, int row, int col, int size)
// Requires: Nothing
// Effects: Returns 0 if a ship cannot be placed at the given coordinate (row, col) with the specified size and direction; otherwise, returns 1.

//int TorCol(char * coordinate,char** opponentGrid, char** DisplayedGrid,char *mode,int *ship)
//Requires:coordinte passed should be a letter
//Effects: fires at the whole correspondig column,updates the Displayed  grid according to the mode chosen(easy/hard), prints HIT or MISS,and decrements the size of the corresponding ship in the `ship` array if the result is a hit.Always returns 1

//int TorRow(char * coordinate,char** opponentGrid, char** DisplayedGrid,char *mode,int *ship)
//Requires:coordinate passed should be a digit or 10
//Effects:fires at the whole corresponding row( digit/10 - 1),updates the Displayed grid according to the mode chosen(easy/hard),prints HIT or MISS, and decrements the size of the corresponding ship in the `ship` array if the result is a hit.Always returns 1

//int Fire(char **opponenetGrid, char **DisplayedGrid, char *coordinates, char *mode, int *ship)
//Requires: Nothing
//Effects:returns 0 if the input coordinate is invalid,and informs the user of the issue.Otherwise fires at the provided coordinate,updates the Displayed grid according to the mode chosen(easy/hard),prints HIT or MISS,decrements the size of the corresponding ship in the `ship` array if the result is a hit.

// int artillery(char **opponentGrid, char **displayedGrid, char *coordinate, char *mode, int flag, int *ship)
// Requires: Nothing
// Effects: If the move is unlocked (flag == 1), fires a 2x2 grid at the given coordinates, updates the displayed grid of the current player based on the mode (easy/hard), returns HIT or MISS,decrements the size of the corresponding ship in the `ship` array if the result is a hit. If still locked, prints a statement to inform the player.

//int Torpedo(char **opponentGrid, char **DisplayedGrid, char *coordinates, char *mode, int *ship, int flag, int counter)
//Requires: coordinte of length<=2
// Effects: If the move is unlocked (flag == 1 and number of ships sunk > 3) and the coordinate is valid,calls`TorRow` or `TorCol` at the specified coordinate, and returns 1. Otherwise, informs the user of the invalid input and returns 0.

//int RadarSweep(char **grid, char **displayedGrid, char *coordinate, int radarSweepsUsed, int **smokeGrid)
//Requires:Nothing
//Effects:If the move is availble for use(number of times used<=3) and coordinates at the 2x2 area are valid,checks the area at the given coordinate, informs the user if opponents ship is found or not without revealing the location, and return 1.Otherwise,informs the user of the invalid input and returns 0.

//int SmokeScreen(int **smokeGrid, char *coordinate, int shipsSunk, int smokeScreensUsed)
//Requires:Nothing
// Effects: If the move is available for use (number of times the smoke screen has been used <= number of sunk ships) and the coordinates within the 2x2 area are valid, it obscures the area at the specified coordinate. This ensures that if a radar sweep is deployed by the opponent, no ships will be detected in this area. Clears the console and returns 1. Otherwise, informs the user of the invalid input and returns 0.
