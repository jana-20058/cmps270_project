*heatmapValue
Test Cases:
1.the heat map has one max value
this test case ensures that the function chooses tha max slot (row,col) 
Expected output: returns a pointer to the max slot
2.the heat map has more that one max
this test case ensures that the function can handle multiple maxs
Expected output: randomly chooses one of the max slots
3.the heat map is generated to zero
this test case ensures that the function handles when the max is zero
Expected output: randomly chooses on the slots (any slot within the Grid)



choosenGrid Function
1.the slot passed is an edge or corner solt and direction is passed correctly(no out of bounds)
This test case ensures that the function update the heat map accordingly even within along the edges
Expected output:each slot within the 2x2 area(adjacent to the chosen slot) is fired at and marke by 'o' if it is a miss ,or by '*' if it is a hit,the heat maoe gets upadated accordingly
2.the slot passed is any arbitrary slot and direction is passed correctly(no out of bounds)
This test case ensures that the function update the heat map accordingly 
Expected output:each slot within the 2x2 area(adjacent to the chosen slot) is fired at and marked with 'o' if it is a miss ,or by '*' if it is a hit,the heat map gets upadated accordingly
3.the 2x2 area covered contains a previous hit or miss or both
this test case ensures that the function handles 2x2 grids that have already been fired apon in some slots(doesn't interven with pervious hits/misses)
Expected output:each slot within the 2x2 area(adjacent to the chosen slot) is fired at if it is '~' and marked  with 'o' if it is a miss ,or by '*' if it is a hit,the heat map gets upadated accordingly

findHighest2x2Grid Function
Test Cases:
1.the heatmap is initialized with 0
this test case ensures that the function handles cases when the highest sum between all 2x2 areas is 0
Expected output:fills a  2x2 Grid  with all the coordinates of the first 2x2 grid whoes sum=0;
2.there are more than one  max 2x2 areas 
this test case ensures that the function handles multiple max's
Expected output: fills a 2x2 grid with the coordinates of the first max(sum=max)
3.the heat map has arbitrary values
this test case ensures that the functions handles regular input correctly
Expected output: fills the 2x2 grid witht he coordinate of the max 2x2 grid(sum=max)

RowForTorpedo Function:
1.pass row out of bounds
this case ensure that this function correctly handles the case when row is out of bounds
Expected Output: Return -1 
2.pass row within bounds 
this case ensure that this function correctly convert the row represented as a string to numerical value and computes the value to be used later on(row -1)
Expected Output: Return the new value of row passed .

matchingCharacters Function
Test Cases:

1.pass as an argument any size of the ships (Battleship, Carrier, Submarine, Destroyer):
This case ensures that the function correctly handles the situation when the size matches one of the ship sizes represented by the letters(d,B,).
Expected Output: The  letter that represent the ship who's size matches the passed size.

2.pass as an argument  any arbitrary Size that doesn’t match the size of any ship (not 5, 4, 3, or 2)
This case ensures that the function correctly handles the situation when the size doesn’t match any of the ship sizes.
Expected Output: Return -1.

checkedge Function:
Test cases:

1.Pass the bot’s displayed grid.
This case ensures that the function will correctly generate a random coordinate at the edge of the grid that is not surrounded by misses.
Expected Output: An array containing the coordinates of this cell (row, col).

matching Function:

1.Pass any index of the array of ships (e.g., 0, 1, 2, 3).
This case ensures that the function correctly matches the ship at the given index to the letter representing it.
Expected Output: The letter representing the ship at the specified index.

2.Pass an index that is out of bounds for the size of the array of ships.
This case ensures that the function correctly handles an invalid index that is not part of the array of ships.
Expected Output: A null terminator character.

Torpedo Function:
1.Case when the number of hits that do not belong to a sunk ship in a column is greater than those in a row.
This case ensures that the entire column will be fired upon.
Expected output: Update both the heatmap (setting hits and misses to 0) and update the bot’s displayed grid.

2.Case when the number of hits that do not belong to a sunk ship in a row is greater than those in a column.
This case ensures that the entire row will be fired upon.
Expected output: Update both the heatmap (setting hits and misses to 0) and update the bot’s displayed grid.

3.Case when the number of hits that do not belong to a sunk ship in a column is equal to those in a row.
This case ensures that either the column or the row will be fired upon.
Expected output: Update both the heatmap (setting hits and misses to 0) and update the bot’s displayed grid.

4.Case when there are no hits other than those corresponding to sunk ships.
This case ensures that the function will apply fire to the row with the highest sum of heatmap values or the column, depending on which has a higher sum.
Expected output: Update both the heatmap (setting hits and misses to 0) and update the bot’s displayed grid.

torpedoCol Function:
1.pass any column within bounds 
this case ensure that this function will correctly apply torpedo on the passed row.
Expected Output: update both Heat map and  Bot displayed Grid.

1.pass any column within bounds 
this case ensure that this function will corrrectly apply torpedo on the passed Row
Expected Output: update both Heat map and  Bot displayed Grid.

 ArtilleryBot Function:
1.case when List generated By radar is not null
this case ensure that we will fire these cells
Expected Output:update both Heat map and  Bot displayed Grid.

2.case when there is hits other then that corresponding to sunk ships
this case ensure that this function will fire the 2x2 grid that is adjcent this cell (left,above,below,right)depending on which has highest sum of heat map values.
Expected Output:update both Heat map and  Bot displayed Grid.

3.case when there is no hits other than that corresponding to sunk ships
this case ensure that function will correctly fire the 2x2 grid with highesr sum of heat map values.
Expected Output:update both Heat map and  Bot displayed Grid.


boundedByMisses Function
Test Cases:

1.Pass  as an argument the coordinate of a cell(row,col) bounded by misses and not on the edges (row=9, col=9, col=0, row=0)or corners
This case ensures that the function correctly handles cells bounded by misses in the middle of the grid.
Expected Output: Returns -1, indicating that the cell is bounded by misses.

2.Pass  as an argument  a coordinate of a cell(row,col) bounded by misses and located in a corner ((0,0), (0,9), (9,0), (9,9)):
This case ensures that the  function correctly handles cells bounded by misses in at the edges of the grid.
Expected Output: Returns -1, indicating that the cell is bounded by misses.

3.Pass a coordinate of a cell bounded by misses and located on the edges but not in a corner (row=9, col=9, col=0, row=0):
This case ensures that the  function correctly handles cells bounded by misses  at the corner of the grid.
Expected Output: Returns -1, indicating that the cell is bounded by misses.

4.Pass a coordinate of a cell that is not bounded by misses (either in the middle, on the edge, or in a corner):
This case ensures that the function correctly handles cells not bounded by misses.
Expected Output: Returns 1, indicating that the cell is not bounded by misses.


updateHeatMap Function
Test Cases:

1.Pass as an argument the result as a hit (*) and the move as "fire":
This case ensures that the heatmap grid is correctly updated when the result is a hit and move is fire .
Expected Output: Prioritize adjacent cells by adding 5 to their value and cells adjacent to those by adding 2.

2.Pass as an argument the result as a miss (o) and the move as "fire":
This case ensures that the heatmap grid is correctly updated when the result is a miss and move is fire.
Expected Output: Decrement adjacent cells by subtracting 1 from their value and cells adjacent to those by subtracting 1

3.pass as an argument the move as "Torpedorow" with the row 
this case ensure that function will correctly update  heat map Grid to 0 at this row 
Expected Output :set this row to 0 in the heat map Grid 

3.pass as an argument the move as "Torpedocolumn" with the column
this case ensure that function will correctly update  heat map Grid to 0 at this column
Expected Output :set this column to 0 in the heat map Grid 

//will be adjusted later on when other functions are implmented
botmove Function
Test Cases:

1.A ship has sunk in the previous turn (flagShipSunkInCurrentTurn == 1), and the number of ships sunk equals 3 (totalNumberOfShipsSunkByBot >= 3):
This case ensures the function correctly calls the torpedo move.
Expected Output: Calls the torpedo function.

2.The number of times the smoke screen is used equals the number of ships sunk (smokeScreensUsedBot = totalNumberOfShipsSunkByBot), radar sweep is unavailable (radarSweepsBot > 3), and no ship has sunk in the previous turn (flagShipSunkInCurrentTurn = 0):
This case ensures the function correctly defaults to the 'fire' move.
Expected Output: Calls the fire function

3.A ship has sunk in the previous turn(flagShipSunk==1),and the number of ships sunk is less than 3
This case ensures that the function correctly calls the Artillery move
Expected Output:Calls the Artillery function

4.The number of times raderSweep has been used is less than 4(radarSweepsUsedBot<=3),and the list that stores the coordinates from the previous ardar used if a ship is detected is empty (targetcount==0)
This test Case ensures that the function correctly calls the radar move
Expected output:Calls the Radar function

5.The number of times the smoke screen is used by the bot is less than or equal to the number of ships it has sunk(
This test case ensures that the function correctly calls the smokescreen function
Expected output:calls the smokescreen function

initializeHeatGrid Function
Test Cases:

1.Passas an argument a dynamically allocated 2D array on the heap:
Expected Output: Dynamically allocate 10 arrays for the 2D array and initialize every cell to 0.

updateDisplayedGridBot Function
Test Cases:

1.Pass an argument  coordinates (nexti and nextj) corresponding to a cell occupied by a ship in the opponent's grid:
This case ensures the bot’s displayed grid is correctly updated to * at this cell, and the size of the corresponding ship is decremented.
Expected Output: Returns *, updates the bot's displayed grid  at this cell to *.

2.Pass as an argument coordinates (nexti and nextj) corresponding to a cell not occupied by a ship in the opponent's grid:
This case ensures the bot’s displayed grid is correctly updated to o at this cell. 
Expected Output: Returns o, updates the bot's displayed grid to o at this cell.

Test Cases for sunkShips Function:
1.The opponent grid has 0 hits
This test case ensures that the function correctly handles grids with no hits yet
Expected Output: Returns a 2D boolean grid filled with the value false
2.The opponent grid has hits corresponding to only already sunk ships
This test case ensures that the function correctly handles hits corresponding to sunk ships
Expected Output: Returns a 2D boolean grid with a mix of true and false values, such that the true values correspond to the coordinates of the sunk ships
3.The opponent grid has a mix of hits, some corresponding to already sunk ships and others that do not
This test case ensures that the function correctly differentiates between slots related to sunk ships and those that do not
Expected Output: A 2D boolean grid of false and true values, such that the coordinates of the sunk ships are the only ones corresponding to true
4.The opponent grid has no previously sunk ships and only an arbitrary number of hits
This test case ensures that the function handles a grid full of hits that do not correspond to any previously sunk ships
Expected Output: Returns a 2D boolean grid filled entirely with false values

ShipPlacemnt Function:
Test Cases:
1.grid passed is an empty Grid(filled with '~')
this test case ensure that the function  randomly places ships when available 
Expected output: the initial grid is updated to contain letters corresponding to ships after placement 
2.grid passed isn't empty (Grid passed isn't just '~')
this test case ensures that the function correctly handles overlap,meaning it doesn't place ships at the already filled slots
Expected output: the initial grid is updated to contain letters corresponding to ships after placement without overlaping with the original content
3.grid passed is full(Grid passed has no '~`)
this test case ensures that the function correctly handles cases when no slot is avialble to place a ship 
Expected output: the initial grid isn't changed 

GetGreatestArea Function
Test Cases:
1.coordinate(row,col) passed is at the corner or along the edge
this test case ensures that the function can handle boundaries correctly without going out of bounds
Expected output:return the diretion of the max 2x2 grid value that remains withing bound
2.the heatmap passed is initialized to 0
this test case ensures that the function correctly handles when the mas 2x2 areas are all 0
Expected output: the defult direction 'N'
3.more than one 2x2 grid have the smae max value
thsi ensures that the function can handle cases when more than one output is logically correct
Expected output:return the direction of the first 2x2 max area found

GenerateHeatmap Function:
1.the displayedBot Grid Has No Hits or Misses (Grid is Filled with ~)
 This test case ensures that the heatmap is properly generated by considering all slots as available for ship placement
Expected Output: A 2D integer grid where each slot is incremented once for every ship that is checked and confirmed to fit in that position
2.the displayedBot Grid has both hits or misses
This test case ensures that the heatmap is correctly generated by only considering the slots where ships can still be placed, excluding areas marked as hits or misses
Expected Output: A 2D integer grid where each slot is incremented once for every  ship that is checked and confirmed to fit within the available slots
3.the displayedBot Grid is full(no '~' available)
This test case ensures that the heatmap won;t be genrated as there are no possible slots are avialable to place any of the ships 
Expected output:a 2D integer Grid initialized to 0


isTargetPresent Function
Case 1:
input:
  list=[{r=1,col=2},{r=3,col=2}]
  row=1,col=2
  TargetCount=2
expected output:
  True  

Case2:
input:
  list=[{r=1,col=2},{r=3,col=2}]
  row=1,col=1
  TargetCOunt=2
expected output:
  False

Case3:
input:
  list=[]
  row=1,col=1
  targetCount=0
expected output:
  False



removeTarget Function:
Case 1:Remove any valid target
input:
   targetList={1,5,7,8,11}
   targetCount=5
   removeTargte(2)
Expected output:
   updatedList={1,7,8,11}
   TargetCount=4
      
Case 2:Remove the first target
input:
   targetList={1,5,7,8,11}
   targetCount=5
   removeTargte(1)
Expected output:
   updatedList={5,7,8,11}
   TargetCount=4

Case 3:Remove the last target
input:
   targetList={1,5,7,8,11}
   targetCount=5
   removeTargte(4)
Expected output:
   updatedList={1,5,7,8}
   TargetCount=4 

Case 4:Remove invalid target
input:
   targetList={1,5,7,8,11}
   targetCount=5
   removeTargte(-1)
Expected output:
   Invalid target index: -1   
(same for removeTarget(5))



addTarget Function:
Case 1:add a new target to an empty list
input:
  targetList={}
  targetCount=0
  addTarget(1,2)
expected output:
   (updated targetList={(1,2)}  
   targetCOunt=1)
   result=true
   
Case 2:add a new target 
input: add a new target
  targetList={(3,4)}
  targetCount=1
  addTarget(1,2)
expected output:
   (updated targetList={(3,4),(1,2)}  
   targetCOunt=2)
   result=true   


 Case 3:add a repeated target 
input:
  targetList={(1,2)}
  targetCount=1
  addTarget(1,2)
expected output:
   (updated targetList={(1,2)}  
   targetCOunt=1)
   result=false

Case 4:add a new target to a full list
input:
  targetList={(1,2),(3,4)} lets say it the max number of elements
  targetCount=2
  addTarget(1,5)
expected output:
   Target list is full. Cannot add more targets
   result=false 


 isAdjacentToSunkShip Function:
 Case 1:
 input:
   oppenentGrid={
    {'~', 'D', '~'},
    {'~', '~', '~'},
    {'C', 'C', 'C'}
          };
       ship = {1, -1}; ( Ship 'C' is active; Ship 'D' is sunk)
       row = 0, col = 0;
Expected output:true

Case 2:
 input:
   oppenentGrid={
    {'~', 'D', '~'},
    {'~', '~', '~'},
    {'C', 'C', 'C'}
          };
       ship = {1, 0}; ( both are active)
       row = 1, col = 1;
Expected output:false

Case 3:
 input:
   oppenentGrid={
    {'D', '~', '~'},
    {'~', '~', '~'},
    {'C', 'C', 'C'}
          };
       ship = {1, -1}; ( Ship 'C' is active; Ship 'D' is sunk)
       row = 0, col = 1;
Expected output:true

Case 4:out of bounds
 input:
   oppenentGrid={
    {'~', 'D', '~'},
    {'~', '~', '~'},
    {'C', 'C', 'C'}
          };
       ship = {1, 0}; ( no sunk ships)
       row = -1, col = 0;
Expected output:false


Case 5: all ships sunk
 input:
   oppenentGrid={
    {'~', 'D', '~'},
    {'~', '~', '~'},
    {'C', 'C', 'C'}
          };
       ship = {-1, -1}; ( both are sunk)
       row = 1, col = 2;
Expected output:true

Case 6:
 input:
   oppenentGrid={
    {'~', '~', '~'},
    {'~', '~', '~'},
    {'~', '~', '~'}
          };
       ship = {}; 
       row = 1, col = 1;
Expected output:false


compareCells Function:
Case 1:
input:
  heatmap = {
    {12, 7, 15},
    {9, 20, 5},
    {3, 17, 10}
};
    int a[2] = {0, 1};  
    int b[2] = {1, 1};  

Expected output:13


Case 2:
input:
  heatmap = {
    {12, 7, 15},
    {9, 20, 5},
    {3, 17, 10}
};
    int a[2] = {1, 0};  
    int b[2] = {2, 2};  

Expected output:0


Case 3:
input:
  heatmap = {
    {12, 7, 15},
    {9, 20, 5},
    {3, 17, 10}
};
    int a[2] = {2, 1}; 
    int b[2] = {2, 2};  

Expected output:-7


Testing Common Functions Between player and Bot:


checkIndex Function:
Test Cases:
1.pass 2 coordinates such that both within bounds
this case ensure that function correctly handles the case when both row and cloumn are within bounds
Expected Output: it will return 1 indicating that  this cell is within bounds.
2.pass 2 coordinates such that both are out of bounds
this case ensure that function correctly handles the case when both row and cloumn are  out of bounds
Expected Output: it will return -1 indicating that this cell is out of bounds 
3.pass 2 coordinates such that row is out of bounds 
this case ensure that function correctly handles the case when row is out of bounds
Expected Output: it will return -1 indicating that this cell is out of bounds 
4.pass 2 coordinates such that column is out of bounds 
this case ensure that function correctly handles the case when  coulumn is out of bounds
Expected Output: it will return -1 indicating that this cell is out of bounds 

gridInitialization Function:
1.Pass a 10x10 grid allocated dynamically on the heap.
This case ensures that each array within this grid is dynamically allocated and properly initialized to ~ .
Expected Output: A dynamically allocated 10x10 grid where all elements are initialized to ~.


matchingIndices Function
Test Cases:

1.Pass as an argument any of the letters representing the ships (C, d, B, s):
This case ensures that the function correctly handles and matches the letter passed with size of ship it represent.
Expected Output:size of ship that is represented by the letter passed

2.Passas an argument  any letter other than (C, d, B, s):
This case ensures that the function correctly handles the situation when the letter doesn’t represent any ship.
Expected Output: Return -1.

printgrid Function
Test Cases:

1.Pass as an argument a grid initialized with ~:
This case ensures that the grid is printed correctly, with rows numbered from 1 to 10 and columns labeled with letters from A to J.
Expected Output: A copy of the grid is printed.




Testing the player's functions:

to_lowerCase function
Test Cases:
1.pass as an argumnt a string of alphabetical letters of lenght >=1
This test case ensures the function can convert any alphabetical string into lower case
Expected Output:changes each charcater in the string to lower case
2.pass an empty string
This test case ensures that the function can handle empty strings
Expected Output:No changes will be observed

fillGrid function:
Test Cases:
1.the user enters valid coordinates for placing a ship (e.g A1,horizontal)
This test case ensures that the function can handle valid input and call loacteship Function to proceed with the ship's placements
Expected output:placement of the ship is done according to the locate ship function
This tets case ensures that the function can handle out of bounds inputs 
2.the user enters out of bounds coordinates (e.g A11,horizontal)
Expected output: a message indicating the coordinates are out of bound
3.the user enters already used or overlapping coordinates
This test case ensures that the function can handle duplicate inputs or overlapping coordinates
Expected output: a message indicating that there is an overlap with the ships
4.the user enters coordinates in an invalid formate (e.g horizontal A1)
This test case ensures that the function can deal with differnt input format
Expected output: a message indicating the input is invalid
5.the user enters invalid directions (e.g A1,diagonal)
this tetst case ensures that the function handles only 2 directions(horizontal and vertical)
Expected output: a message indicating invalid direction 
6.the user enters invalid row or column coordinate (e.g A,horizontal)
this test cases ensures the function handles undefined rows or columns 
Expecte output: a message indicating invalid input
7.the user enters the direction in mixed case(e.g A1,VerTICal)
this test case ensures the function can deal with any case direction and call loacteship Function to proceed with the ship's placements
Expected output :placement of the ship is done according to the locate ship function


locateship function
Test Cases:
1.Horizontal placement of the ship
this test case ensures the fucntion can handle basic horizontal placmnet of ships (e.g B3,horizontal)
Expected output:the ship is located at the coordinates B3,C3...according to the ship's size
2.Vertical placement of the ship 
this test case ensures the fucntion can handle basic vertical placmnet of ships (e.g B3,vertical)
Expected output:the ship is located at the coordinates B3,B4...according to the ship's size
3.Horizontal or vertical placment of the ship along the edges
this test case ensures that the function can place the ships along the edges of the grid if within bounds
Expected output:the ship is located at the passed coordinate along the edge

TorCol Function
Test Cases:
1.coordinate corresponds to a column already containing marked hits and misses in easy mode
this test case ensures the function correctly fires at the column without changing already marked hits and misses.It marks the unmarked hits with '*' and unmarked misses with 'o'.
Expected Output: if at least one new hit is found prints "HIT!" else print "MISS!" 
2.coordinate corresponds to a column already containing marked hits and misses in hard mode
this test case ensures the function  correctly fires at the column without changing already marked hits. It marks the unmarked hits with '*'(misses aren't marked)
Expected Output: if at least one new hit is found prints "HIT!" else print "MISS!" 
3.coordinate corresponds to an unmarked column in easy mode
this test case ensures the function  correctly fires at an umarked column.It marks the hits with '*' and misses with 'o'.
Expected Output: if at least one hit is found prints "HIT!" else print "MISS!"
4.coordinate corresponds to an unmarked column in hard mode
this test case ensures the function  correctly fires at an umarked column.It marks the hits with '*' (misses aren't marked)
Expected Output: if at least one hit is found prints "HIT!" else print "MISS!"

TorRow Function
1.coordinate corresponds to a row already containing marked hits and misses in easy mode
this test case ensures the function correctly fires at the row without changing already marked hits and misses.It marks the unmarked hits with '*' and unmarked misses with 'o'.
Expected Output: if at least one new hit is found prints "HIT!" else print "MISS!" 
2.coordinate corresponds to a row already containing  marked hits and misses in hard mode
this test case ensures the function  correctly fires at the row without changing already marked hits. It marks the unmarked hits with '*'(misses aren't marked)
Expected Output: if at least one new hit is found prints "HIT!" else print "MISS!" 
3.coordinate corresponds to an unmarked row in easy mode
this test case ensures the function  correctly fires at an umarked row.It marks the hits with '*' and misses with 'o'.
Expected Output: if at least one hit is found prints "HIT!" else print "MISS!"
4.coordinate corresponds to an unmarked row in hard mode
this test case ensures the function  correctly fires at an umarked row.It marks the hits with '*' (misses aren't marked)
Expected Output: if at least one hit is found prints "HIT!" else prints "MISS!"

Fire Function
Test Cases:
1.A valid coordinte is passed in easy mode (e.g fire A1)
this ensures the the function correctly fires a the specified slot(A1).The slot is marked with '*' if it contained a part of the opponents ship (hit),otherwise it marks it as a miss'o'
Expected output:prints "HIT!" if the slot contained a ship ,else prints "MISS!",returns 1
2.A valid coordinte is passed in hard mode (e.g fire A1)
this ensures the the function correctly fires a the specified slot(A1).The slot is marked with '*' if it contained a part of the opponents ship (hit).(misses aren't marked)
Expected output:prints "HIT!" if the slot contained a ship ,else prints "MISS!",returns 1
3.An out of bound coordinate is passed in either hard or easy mode e.g(fire L3)
this ensures that the function correctly handle invalid input
Expected ourput :prints "Invalid input!",returns 0,
4.A coordinate perviously marked(fired at using any function)
this ensures that the function handles duplicated input 
Expected output:prints:"You have already fired at this coordinate",returns 0
5.the coordinte passed is an edge coordinate whether in easy or hard mood (e.g fire J10 )
this ensures that the function can handle edge coordinates by marking a hit with '*' and a miss with 'o'(the miss is marked only in easy mode)
Expecte output:prints "HIT!" if the slot contained a ship ,else prints "MISS!",returns 1

Torpedo Function
Test Cases:
1.the flag passed isn't 1(flag==0)
this tast case ensures that the function doesn't use an unlocked move
Expected Output: prints :"Invalid input/You can't use this move yet,make sure you have sunk 3 ships such that the last one sunk within the current turn to use the move on the next turn", and returns 0
2.the counter(number of ships sunk) <3
this tast case ensures that the function doesn't use a locked move
Expected Output: prints :"Invalid input/You can't use this move yet,make sure you have sunk 3 ships such that the last one sunk within the current turn to use the move on the next turn",and returns 0
3.the coordinate passed is invalid(out of bounds)(e,g torpedo X ot torpedo  20)
this test case ensures that the function handles out of bounds input
Expected output:returns 0
4.the coordinate passed is an alphabit(corresponds to a column)
this ensures that the function correctly handles column coordinates .Calls the TorCol function to fire at the given column
Expected output:firing at the corresponding column according to the TorCol Function.Returns 1
5.the coordinate passed is an a digit(corresponds to a row)
this ensures that the function correctly handles row coordinates .Calls the TorRow function to fire at the given row
Expected output:firing at the corresponding row according to the TorCol Function.Returns 1
6.the coordinate passed is an edge coordinate (e.g torpedo 10)
this ensures that the function can handle boundary input
Expected output :fireing at the corresponding row(if digit) or column(if alphabit) according to the TorRow or TorCol functions respectively.Returns 1

RadarSweep function
Test Cases:
1.radarSweepsused>3 (number of times rader sweep was used is more than 3)
This test case ensures that the function doesn't use a locked move
Expected output:prints :"You have used all your radar sweeps",and returns 0
2.the coordinate passed is out of bounds (e.g Radar X1)
This test case ensures that the function out of bounds coordinates
Expected Output :prints "Invalid coordinate" ,and returns 0
3.an arbitrary coordinate is passed (e.g radar A3)
this test case ensures that the function correctly handles valid input within a 2x2 area (A3,A4,B3,B4)
Expected output:if at least one of the slots contains part of a ship prints:"Enemy ships found", else prints :"No enemy ships found", and returns 1
4.The smokeGrid provided contains ones at the exact coordinates passed to the function
this ensures that the function doesn't report any ships found within the 2x2 area were smokescreen was deployed by the opponent 
Expected output:prints "No enemy ships found", and returns 1
5.The smokeGrid provided contains ones at coordinates other than the ones passed 
This ensures that the function correctly reports any ships found, even if the smoke screen has been used by the opponent, as long as they are not located at the coordinates passed
Expected Output: if at least one of the slots contains part of a ship prints:"Enemy ships found", else prints :"No enemy ships found", and returns 1
6.The SmokeGrid passed conatins ones along some of the coordinates passed 
this ensures that the function correctly reports ship found within the 2x2 area of the coordinates that aren't  covered by the smoke screen 
Expected output :if at least one of the uncovered slots  contains part of a ship prints:"Enemy ships found", else prints :"No enemy ships found", and returns 1
// idk if i shoud mention edge coordinate since if we put A1 it works but J1 it shouldn't perform however in out code we dont handle the case

SmokeScreen function
Test Cases:
1.SmokeScreenUsed>shipsSunk(number of time the smoke screen is used is greater than the number of ships sunk by the current player)
This ensures that the function doesn't deploy smoke screen when it is still locked 
Expected output:prints "You can't use smoke screen",and returns 0
2.the coordinate passed is out of bounds
this esures that the function handles out fo bound coordinates
Expected output:"Invalid coordinates",and returns 0
3.arbitary coordinates are passed 
this ensures that the function correctly deployes smoke screen along the 2x2 area at the specified coordinate
Expected output:fills the smokeGrid with 1's at the specified 2x2 area ,prints :"Smoke screen deployed succssfully","Press Enter to continue", clears console ,and return 1
// idk if i shoud mention edge coordinate since if we put A1 it works but J1 it shouldn't perform however in out code we dont handle the case

artillery Function
Test Cases:
1.pass as an argument flag = 0
This case ensures that function correctly handle the case when move is locked.
Expected Output: Prints: "You cannot use this move yet. Sink one ship of your opponent in the current turn to unlock it for the next turn."
2.Pass as an argument coordinate of cell(row,col) that is out of bounds (either row or column, or both):
This case ensures that the function correctly handles out-of-bounds coordinates.
Expected Output: Prints: "Invalid input!"
3.pass as an argument flag = 1, mode = 'easy,' and a valid  2x2 grid 
This case ensures that function correctly fires at the 2x2 grid and represents hits with * and misses with o.
Expected Output: If at least one cell in the grid is hit, prints: "HIT". Otherwise, prints: "MISS".
3.pass as an argument flag = 1, mode = 'hard' and a valid  2x2 grid
This case ensures that the function correctly fires at the 2x2 grid, representing only hits with * (misses are not represented ).
Expected Output: If at least one cell in the grid is hit, prints: "HIT". Otherwise, prints: "MISS".
4.pass as an argument  flag i= 1, any mode (easy or hard), and the 2x2 grid is invalid (one cell out of bounds):
This case ensures that the function correctly handles invalid grids.
Expected Output: Prints: "Invalid input/area is out of bounds."

canPlaceShip Function
Test Cases:
1.Pass  as an argument  the player’s grid with a either  directions Horizontal(H) or Vertical(V) and legal coordinates (within bounds and without overlap):
This test case ensures  that the function correctly handles coordinates that are neither out of bounds nor overlapping.
Expected Output: Returns 1, indicating that the ship can be placed at this cell.
2.Pass  as an argument the player’s grid with  either  directions Horizontal(H) or Vertical(V) and coordinates that violate boundary constraints (out of bounds):
This case ensures that the function correctly handles coordinates that are out of bounds.
Expected Output: Returns -1, indicating that the ship cannot be placed at this cell.
3.Pass  as an argument the player’s grid with a direction (Horizontal or Vertical) and coordinates that overlap with other ships:
This case ensures that the function correctly handles overlapping coordinates.
Expected Output: Returns -1, indicating that the ship cannot be placed at this cell.


ShipsSunk Function:
Test cases :
1.Case when there is no ship sunk 
this case  ensure that the counter will not be incrmented
Expected Output: return number of ship sunk (same as before)
2.case when a ship is sunk (its value is 0)
this case ensure that the function will set its size to -1 and increment count of sunk ships.
Expected Output: return number of sunk ships (incremented by one)and prints a statment stating which ship is sunk

Row Function:
Test cases :
1.case when row is out of bounds ( row<1||row>10)
this case ensure that function correctly handles case when row out of bounds.
Expected Output = return -1 
2.case when row is within bounds(row>=1||row<=10)
this case ensure that function will correctly calculate and convert the  value of row  to be used late on (row-1)
Expected Output:return numerical value of row -1

Col Function:
Test cases :
1.case when column is out of bounds ( col>J)
this case ensure that function correctly handles case when col out of bounds.
Expected Output = return -1 
2.case when col is within bounds(col>=A||col<=J)
this case ensure that function will correctly  convert and calculate the value of column to be used later on.
Expected Output:return numerical value representing  column
